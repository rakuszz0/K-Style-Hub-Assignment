basePath: /api/v1
definitions:
  ecommerce_dto_auth.BaseResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  ecommerce_dto_auth.ChangePasswordRequest:
    properties:
      new_password:
        maxLength: 72
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  ecommerce_dto_auth.SignInRequest:
    properties:
      password:
        maxLength: 72
        minLength: 8
        type: string
      value:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - password
    - value
    type: object
  ecommerce_dto_auth.SignUpRequest:
    properties:
      address:
        description: Opsional
        maxLength: 255
        type: string
      email:
        maxLength: 100
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      phone:
        description: 'Format E.164: +6281234567890'
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    - username
    type: object
  ecommerce_dto_brands.BrandProductResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  ecommerce_dto_brands.BrandRequest:
    properties:
      name:
        type: string
    type: object
  ecommerce_dto_brands.BrandResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/ecommerce_dto_brands.BrandProductResponse'
        type: array
    type: object
  ecommerce_dto_product.ProductRequest:
    properties:
      brand_id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  ecommerce_dto_product.ProductResponse:
    properties:
      brand_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  ecommerce_dto_result.ErrorResult:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  ecommerce_dto_result.SuccessResult:
    properties:
      code:
        type: integer
      data: {}
    type: object
  models.Product:
    properties:
      brand_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  models.User:
    properties:
      _:
        type: string
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      last_name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserResponseJWT:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      name:
        type: string
      phone:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@ecommerce.com
    name: API Support
  description: This is an ecommerce service API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Ecommerce API
  version: "1.0"
paths:
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Change the password of the currently logged-in user
      parameters:
      - description: Old and New Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ecommerce_dto_auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      security:
      - BearerAuth: []
      summary: Change user's password
      tags:
      - Auth
  /auth/check-auth:
    get:
      description: Get details of the currently logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponseJWT'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      security:
      - BearerAuth: []
      summary: Get current authenticated user
      tags:
      - Auth
  /auth/signin:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ecommerce_dto_auth.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Login user
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Sign up with username, email, and password
      parameters:
      - description: Sign Up Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ecommerce_dto_auth.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ecommerce_dto_auth.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Register new user
      tags:
      - Auth
  /brands:
    get:
      description: Get a list of all brands
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get all brands
      tags:
      - Brand
    post:
      consumes:
      - application/json
      description: Create a new brand (admin only)
      parameters:
      - description: Brand data
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/ecommerce_dto_brands.BrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/ecommerce_dto_brands.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      security:
      - BearerAuth: []
      summary: Create a new brand
      tags:
      - Brand
  /brands/{id}:
    delete:
      description: Delete a brand from the system
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Delete a brand by ID
      tags:
      - Brand
    get:
      description: Get a brand by its ID
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get brand by ID
      tags:
      - Brand
    put:
      consumes:
      - application/json
      description: Update a brand's details (Admin only)
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      - description: Brand data
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/ecommerce_dto_brands.BrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/ecommerce_dto_brands.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      security:
      - BearerAuth: []
      summary: Update a brand by ID
      tags:
      - Brand
  /products:
    get:
      description: Get a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get all products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create a new product with brand association (admin only)
      parameters:
      - description: Product data
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/ecommerce_dto_product.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/ecommerce_dto_product.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Product
  /products/{id}:
    delete:
      description: Delete a product from the system
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Delete a product by ID
      tags:
      - Product
    get:
      description: Get a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get product by ID
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Update a product by ID
      tags:
      - Product
  /products/brand/{brand_id}:
    get:
      description: Get all products associated with a specific brand ID
      parameters:
      - description: Brand ID
        in: path
        name: brand_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get products by brand ID
      tags:
      - Product
  /products/paginate:
    get:
      consumes:
      - application/json
      description: Get paginated list of products
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Limit per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get all products with pagination
      tags:
      - Product
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get all users
      tags:
      - User
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Delete user by ID
      tags:
      - User
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Update user by ID
      tags:
      - User
  /users/paginate:
    get:
      consumes:
      - application/json
      description: Get paginated list of users
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Limit per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ecommerce_dto_result.SuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecommerce_dto_result.ErrorResult'
      summary: Get all users with pagination
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
